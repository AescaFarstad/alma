### Agent Simulation & Navigation Mesh Implementation

This commit introduces a major new feature set focused on agent-based simulation. The application is no longer just a static map viewer but now includes a dynamic simulation layer with agents that can navigate the environment.

#### Key Features & Changes:

1.  **Navigation Mesh Generation**:
    *   The data processing pipeline (`src/mapgen/`) has been significantly enhanced to generate a navigation mesh (`navmesh.txt`) from building footprint data.
    *   `build_navmesh.ts` now uses Delaunay triangulation (`poly2tri`) to create the navmesh, defining walkable areas for agents.
    *   The `simplify.ts` script was updated to produce `blobs.txt`, which serves as input for the navmesh holes.

2.  **Agent Simulation Logic**:
    *   A comprehensive set of classes (`Agent.ts`, `AgentNavigation.ts`, `AgentSpawner.ts`, etc.) has been added to manage agent creation, state, behavior, and movement physics.
    *   The core game state (`GameState.ts`) is now aware of agents and includes a time-scaling feature to pause/resume the simulation.

3.  **Application Initialization & Structure**:
    *   The game's startup sequence (`src/main.ts`) now loads all the necessary new data files, including the navmesh and building blobs.
    *   Game logic initialization has been moved into the `Map.vue` component to ensure the map is fully rendered before the simulation begins.
    *   The old `src/logic/StartGame.ts` file has been deleted, and its logic was refactored.

4.  **Rendering and Drawing System**:
    *   The rendering engine now distinguishes between static geometry and dynamic objects. A new `DynamicScene` (`src/logic/drawing/DynamicScene.ts`) and associated helpers have been added to efficiently render a large number of moving agents.

5.  **New UI Components for Debugging**:
    *   A suite of new Vue components has been added under `src/components/ui/` to aid in development and debugging. These include:
        *   `TimeControls.vue`: To pause, play, and control simulation speed.
        *   `AddAgentDebug.vue`: To spawn new agents for testing.
        *   `ContextMenu.vue`: For interacting with the map and agents.
        *   `AvatarState.vue`, `DebugTools.vue`: For displaying debug information.
    *   The main overlay now shows a live count of active agents.

6.  **Build & Configuration**:
    *   Dependencies in `package.json` were updated, notably to include `poly2tri`.
    *   `tsconfig.build.json` was corrected to exclude the `src/mapgen` build scripts from the final application bundle.

This is a foundational update that transforms the project into a dynamic simulation platform. 