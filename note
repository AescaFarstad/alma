july 15
    refactor data pipeline
    Moved to OpenLayers
    using tiled map that can switch between dynamic and static tiles. Dynamic are faster for some reson.

july 16
    Tried Cline + kimi k2
    Came up with the zombies -> porcessing chains (chemistry) idea
    Combined layers for performance
    PixieJS, building selection, optimising performance

july 17
    SceneState + DrawPrimitives architechture

july 19
    Geometry simplification
july 23
    uniting, deduplication, cornerize
july 26-27
    tsnode, simplification in pre-processing S6, S7, blobs
    fixed annoyign bug with clipper where it had different API under node.js and browser
    triangularization, corridor, A*, funnel
july 28
    raycasting, avatar movement, floating point errors
august 2
    point in triangle bugfix, two corners lookahead, corner crossing, slowing down before corner, intelligence, pooling
august 6-7
    sprites

august 8-13
    WASM implementation, parity 60 fps at 8000 agents (no render)
    improved pointInTriangle
august 16-17
    planning new polygon navmesh, implementing build, starting integration
august 18-21
    rewamping wasm initialization
august 21-22
    clearing inconsistencies, fixing leftovers, ui. selecting buildings, sync bboxes, buffer spatial indexes
    ts and wasm parity on tiny navmesh
august 24
    fix concave polygons, point in poly, point in triangle optimisations, benchmarks, fixes, new polygonalization
august 25-26
    debugging navigation, corners, offsets
august 29-30
    separate ai, Event buffer, reversed corridor, QOL extension, tabs, whitespace


navTriIndex doesn't affect much. ~the same at 512. STalls at 1024 at 10k+



manual edits to data processing - a106560244 = roof or sub polygon hole
w51155804 Ma1023116080 simply overlap
some have "inscribedCenter":null

w234872170 sole linestring

Ma1036526660, Ma27375097540, Ma27375097480, Ma27375097520, Ma27375097500 unite into one


8 fps -> 60 fps simply by removing memory allocations and reusing text nodes


don't include sentinels in indexes

why does main.cpp allocate. does it ever clear?



optimise corner finding

dual_funnel tri is incorrect because it is set before teh offsetting fo the corner

try corner offsetting during data generation

ts random generates garbage


brain should not reset if we are in the unwalkable territory